@use 'sass:math';
@use 'sass:list';

@charset "UTF-8";

/*!
 * Hamburgers
 * @description Tasty CSS-animated
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/
 * @link https://github.com/jonsuh/
 */

// Settings
// ==================================================
$padding-x: 15px !default;
$padding-y: 15px !default;
$layer-width: 20px !default;
$layer-height: 1px !default;
$layer-spacing: 6px !default;
$layer-color: #fff !default;
$layer-border-radius: 4px !default;
$hover-opacity: 100% !default;
$hover-transition-duration: 0.3s !default;
$hover-transition-timing-function: linear !default;
$hover-use-filter: false !default;
$hover-filter: opacity(50%) !default;

// ==================================================
$types: (3dx) !default;

// Base Hamburger
// ==================================================
.hamburger {
  padding: $padding-y $padding-x;
  display: inline-block;
  cursor: pointer;

  transition-property: opacity, filter;
  transition-duration: $hover-transition-duration;
  transition-timing-function: $hover-transition-timing-function;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  outline: none;
  margin: 0;
  overflow: visible;

  &:hover {
    @if $hover-use-filter == true {
      filter: $hover-filter;
    } @else {
      opacity: $hover-opacity;
    }
  }
}

.hamburger-box {
  width: $layer-width;
  height: $layer-height * 3 + $layer-spacing * 2;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: math.div($layer-height, -2);

  &,
  &::before,
  &::after {
    width: $layer-width;
    height: $layer-height;
    background-color: $layer-color;
    border-radius: $layer-border-radius;
    position: absolute;
    transition-property: transform;
    transition-duration: 300ms;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: '';
    display: block;
  }

  &::before {
    top: ($layer-spacing + $layer-height) * -1;
  }

  &::after {
    bottom: ($layer-spacing + $layer-height) * -1;
  }
}

.hamburger-black {
  @extend .hamburger-inner;
  &,
  &::before,
  &::after {
    width: $layer-width;
    height: $layer-height;
    background-color: black;
    border-radius: $layer-border-radius;
    position: absolute;
    transition-property: transform;
    transition-duration: 300ms;
    transition-timing-function: ease;
  }
}

// Hamburger types
// ==================================================
@if list.index($types, 3dx) {
  /*
     * 3DX
     */
  .hamburger--3dx {
    .hamburger-box {
      perspective: $layer-width * 2;
    }

    .hamburger-inner {
      transition: transform 300ms cubic-bezier(0.645, 0.045, 0.355, 1),
        background-color 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1);

      &::before,
      &::after {
        transition: transform 300ms cubic-bezier(0.645, 0.045, 0.355, 1);
      }
    }

    &.is-active {
      .hamburger-inner {
        background-color: transparent;
        transform: rotateY(180deg);

        &::before {
          transform: translate3d(0, $layer-height + $layer-spacing, 0)
            rotate(45deg);
        }

        &::after {
          transform: translate3d(0, ($layer-height + $layer-spacing) * -1, 0)
            rotate(-45deg);
        }
      }
    }
  }
}
